#version 330 core
//This was provided it is used for the light shader on any 2d plane, I have modified it so it can handle multiple lights, and spotlights
in vec3 fragPos;
in vec3 ourNormal;
in vec2 ourTexCoord;

out vec4 fragColor;

uniform sampler2D first_texture;
uniform vec3 viewPos;

struct Light {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float coneAngle;
  vec3 coneDirection;
  float hasDirection;
};

uniform Light light[10];

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
};

uniform Material material;

void main() {
  // ambient
  vec3 result;
  float ambiantTotalX;
  float ambiantTotalY;
  float ambiantTotalZ;

  float ambiantX;
  float ambiantY;
  float ambiantZ;

    float diffuseTotalX;
    float diffuseTotalY;
    float diffuseTotalZ;

    float diffuseX;
    float diffuseY;
    float diffuseZ;

  for (int i=0;i<10;i++){
        float modifier = 1.0;

        ambiantX = light[i].ambient.x;
        ambiantY = light[i].ambient.y;
        ambiantZ = light[i].ambient.z;

        if (light[i].ambient.x > 1) {
            ambiantX = 1;
        }
        if (light[i].ambient.y > 1) {
            ambiantY = 1;
        }
        if (light[i].ambient.z > 1) {
            ambiantZ = 1;
        }

        //Makesure ambiant light doesn't go too high
        if (ambiantTotalX + ambiantX >= 1) {
            ambiantX = 1 - ambiantTotalX;
            ambiantTotalX = 1;
        } else {
            ambiantTotalX =+ light[i].ambient.x;
        }

        if (ambiantTotalY + light[i].ambient.y >= 1) {
            ambiantY = 1 - ambiantTotalY;
            ambiantTotalY = 1;
        } else {
            ambiantTotalY += light[i].ambient.y;
        }

      if (ambiantTotalZ + light[i].ambient.z >= 1) {
        ambiantZ = 1 - ambiantTotalZ;
        ambiantTotalZ = 1;
      } else {
        ambiantTotalZ += light[i].ambient.z;
      }

      vec3 ambient = vec3(ambiantY, ambiantY, ambiantY)  * material.ambient * texture(first_texture, ourTexCoord).rgb;

        diffuseX = light[i].diffuse.x;
        diffuseY = light[i].diffuse.y;
        diffuseZ = light[i].diffuse.z;

        //Makesure diffuse light doesn't go too high
        if (diffuseTotalX + light[i].diffuse.x > 0.5) {
            diffuseX = 0.5 - diffuseTotalX;
            diffuseTotalX = 0.5;
        } else {
            diffuseTotalX =+ light[i].diffuse.x;
        }

        if (diffuseTotalY + light[i].diffuse.y > 0.5) {
            diffuseTotalY = 0.5;
            diffuseY = 0.5 - diffuseTotalY;
        } else {
            diffuseTotalY += light[i].diffuse.y;
        }

      if (diffuseTotalZ + light[i].diffuse.z > 0.5) {
        diffuseTotalZ = 0.5;
        diffuseZ = 0.5 - diffuseTotalZ;
      } else {
        diffuseTotalZ += light[i].diffuse.z;
      }

      // diffuse
      vec3 norm = normalize(ourNormal);
      vec3 lightDir = normalize(light[i].position - fragPos);
      float diff = max(dot(norm, lightDir), 0.0);
      vec3 diffuse = vec3(diffuseX, diffuseY, diffuseZ) * (diff * material.diffuse) * texture(first_texture, ourTexCoord).rgb;

      // specular
      vec3 viewDir = normalize(viewPos - fragPos);
      vec3 reflectDir = reflect(-lightDir, norm);
      float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
      vec3 specular = light[i].specular * (spec * material.specular);


        if (light[i].hasDirection == 1) {

            vec3 surfaceToLight = normalize(light[i].position.xyz - fragPos);
            float distanceToLight = length(light[i].position.xyz - fragPos);

            modifier = 1f + (1.0 / (1.0 + 1.0 * pow(distanceToLight, 3)));
           // modifier = 1.0;
            float lightToSurfaceAngle = degrees(acos(dot(-surfaceToLight, normalize(light[i].coneDirection))));
            if(lightToSurfaceAngle > light[i].coneAngle){
                //ambient = vec3(2.0,2.0,2.0);
                modifier = 0.0;
            } else {
                diffuse = vec3(0.1,0.1,0.0);
            }
}

      result += modifier * (ambient + diffuse + specular);
  }
  fragColor = vec4(result, 1.0);
}