#version 330 core
//This was provided it is used for the light shader on any 3d mesh, I have modified it so it can handle multiple lights
in vec3 fragPos;
in vec3 ourNormal;
in vec2 ourTexCoord;

out vec4 fragColor;
 
uniform vec3 viewPos;

struct Light {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

uniform Light light[10];

struct Material {
  sampler2D diffuse;
  sampler2D specular;
  float shininess;
}; 
  
uniform Material material;

void main() {
  // ambient
  vec3 result;
  float ambiantTotalX;
  float ambiantTotalY;
  float ambiantTotalZ;

  float ambiantX;
  float ambiantY;
  float ambiantZ;

  for (int i=0;i<10;i++){
        ambiantX = light[i].ambient.x;
        ambiantY = light[i].ambient.y;
        ambiantZ = light[i].ambient.z;

        ambiantTotalX += light[i].ambient.x;
        if (ambiantTotalX > 1) {
        ambiantX = 0;
        }

        ambiantTotalY += light[i].ambient.y;
        if (ambiantTotalY > 1) {
        ambiantY = 0;
        }
      ambiantTotalZ += light[i].ambient.z;
      if (ambiantTotalZ > 1) {
       ambiantZ = 0;
      }
      vec3 ambient = vec3(ambiantX, ambiantY, ambiantZ) * vec3(texture(material.diffuse, ourTexCoord));

      // diffuse
      vec3 norm = normalize(ourNormal);
      vec3 lightDir = normalize(light[i].position - fragPos);
      float diff = max(dot(norm, lightDir), 0.0);

      vec3 diffuse = light[i].diffuse * diff * vec3(texture(material.diffuse, ourTexCoord));

      // specular
      vec3 viewDir = normalize(viewPos - fragPos);
      vec3 reflectDir = reflect(-lightDir, norm);
      float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
      vec3 specular = light[i].specular * spec * vec3(texture(material.specular, ourTexCoord));

      result += ambient + diffuse + specular;
     }
  fragColor = vec4(result, 1.0);
}